<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="configuration" version="5.0">
<title>Configuration</title>

<para><citetitle>XML Calabash</citetitle> reads configuration
information from several sources. The default configuration, built
into the application, is augmented by user-specified configuration
files, system properties, and command line options, generally in that
order.</para>

<para>This chapter summarizes the configuration options, irrespective of how they're
set.</para>

<section xml:id="cfg.saxon-processor">
<title>Saxon processor</title>

<para>There are three classes of Saxon processor: “home edition”, “professional edition”,
and “enterprise edition”. There are four ways to select the edition you wish to use:
</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--saxon-processor</literal>=<replaceable>edition</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-P</literal><replaceable>edition</replaceable></entry>
</row>
<row>
  <entry>Java system property:</entry>
  <entry><property>com.xmlcalabash.saxon-processor</property>=<replaceable>edition</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="starttag">cc:saxon-processor</tag><replaceable>edition</replaceable><tag class="endtag">cc:saxon-processor</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="emptytag">calabash <tag class="attribute">saxonProcessor</tag>="<tag class="attvalue"><replaceable>edition</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>Where <replaceable>edition</replaceable> is one of “<literal>he</literal>”,
“<literal>pe</literal>”, or “<literal>ee</literal>”. The actual edition that you get
will depend on where the Saxon jar files appear on your classpath. <citetitle>XML
Calabash</citetitle> will proceed even if it cannot obtain the requested edition,
but dynamic errors will occur if you attempt to use features not available in the
edition actually used.</para>

<para>Schema aware processing requires “enterprise edition”; if you
request schema aware processing, the processor option is treated as if you'd
requested “<literal>ee</literal>” irrespective of what you actually specified.</para>
</section>

<section xml:id="cfg.saxon-configuration">
<title>Saxon configuration</title>

<para>The Saxon “professional edition” and
“enterprise edition” processors can load an
<link xlink:href="http://saxonica.com/documentation/configuration/configuration-file.xml">external
configuration file</link> to control various aspects of the Saxon processor.
There are three ways to specify the location of this file:
</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--saxon-configuration</literal>=<replaceable>filename</replaceable></entry>
</row>
<row>
  <entry>Java system property:</entry>
  <entry><property>com.xmlcalabash.saxon-configuration</property>=<replaceable>filename</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="starttag">cc:saxon-configuration</tag><replaceable>filename</replaceable><tag class="endtag">cc:saxon-configuration</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry>
    <tag class="emptytag">calabash <tag class="attribute">saxonConfigFile</tag>="<tag class="attvalue"><replaceable>filename</replaceable></tag>"</tag>
    or
    <tag class="starttag">calabash</tag><tag class="starttag">saxonConfig</tag><replaceable>saxon config resource</replaceable><tag class="endtag">saxonConfig</tag><tag class="endtag">calabash</tag>
  </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The settings in this file take precedence over other, related settings
available in Calabash (for example, schema awareness or processor type).
This option will cause <citetitle>XML Calabash</citetitle> to throw an error
if you are using “home edition”.</para>
</section>

<section xml:id="cfg.schema-aware">
<title>Schema aware processing</title>

<para>There are four ways to enable schema aware processing:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--schema-aware</literal>[=<replaceable>boolean</replaceable>]</entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-a</literal></entry>
</row>
<row>
  <entry>Java system property:</entry>
  <entry><property>com.xmlcalabash.schema-aware</property>=<replaceable>boolean</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="starttag">cc:schema-aware</tag><replaceable>boolean</replaceable><tag class="endtag">cc:schema-aware</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="emptytag">calabash <tag class="attribute">schemaAware</tag>="<tag class="attvalue"><replaceable>Ant boolean</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>Schema aware processing requires <citetitle>Saxon EE</citetitle>. If schema aware processing
is enabled, then PSVIs are passed between steps.</para>
</section>

<section xml:id="cfg.debug">
<title>Debug</title>

<para>There are four ways to enable debugging:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--debug</literal>[=<replaceable>boolean</replaceable>]</entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-D</literal></entry>
</row>
<row>
  <entry>Java system property:</entry>
  <entry><property>com.xmlcalabash.debug</property>=<replaceable>boolean</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="starttag">cc:debug</tag><replaceable>boolean</replaceable><tag class="endtag">cc:debug</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="emptytag">calabash <tag class="attribute">debug</tag>="<tag class="attvalue"><replaceable>Ant boolean</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>If debugging is enabled, errors will produce Java stack traces.</para>
</section>

<section xml:id="cfg.safe-mode">
<title>Safe mode</title>

<para>There are three ways to enable safe mode:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--safe-mode</literal>[=<replaceable>boolean</replaceable>]</entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-S</literal></entry>
</row>
<!-- why isn't there a system property for safe-mode? -->
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="starttag">cc:safe-mode</tag><replaceable>boolean</replaceable><tag class="endtag">cc:safe-mode</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="emptytag">calabash <tag class="attribute">safeMode</tag>="<tag class="attvalue"><replaceable>Ant boolean</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>If safe-mode is enabled, only XProc standard steps can be instantiated and any attempt to
access the local filesystem will result in a dynamic error.</para>
</section>

<section xml:id="cfg.config">
<title>Alternate configuration file</title>

<para>An alternate configuration file can be loaded from the command line:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--config</literal> <replaceable>configuri</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-c</literal> <replaceable>configuri</replaceable></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry>
    <tag class="emptytag">calabash <tag class="attribute">configFile</tag>="<tag class="attvalue"><replaceable>configuri</replaceable></tag>"</tag>
    or
    <tag class="starttag">calabash</tag><tag class="starttag">config</tag><replaceable>config resource</replaceable><tag class="endtag">config</tag><tag class="endtag">calabash</tag>
  </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.log-style">
<title>Logging style</title>

<para>There are two ways to specify the logging style:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--log-style</literal>=<replaceable>style</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-G</literal><replaceable>style</replaceable></entry>
</row>
<!-- why isn't there a system property for log-style? -->
<!-- why isn't there an XML configuration for log-style? -->
<row>
  <entry>Ant task:</entry>
  <entry><tag class="emptytag">calabash <tag class="attribute">logStyle</tag>="<tag class="attvalue"><replaceable>style</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The default logging style for p:log output is
“<literal>wrapped</literal>”. You can specify alternate styles of
“<literal>plain</literal>”, “<literal>directory</literal>”,
or “<literal>off</literal>” to suppress all p:log output. The value
“<literal>off</literal>” disables all logging, even if individual
<tag>p:log</tag>
elements specify an alternate style with
<tag class="attribute">cx:logstyle</tag>.
</para>
</section>

<section xml:id="cfg.entity-resolver">
<title>Entity resolver</title>

<para>There are four ways to specify the entity resolver:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--entity-resolver</literal>=<replaceable>classname</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-E<replaceable>classname</replaceable></literal></entry>
</row>
<row>
  <entry>Java system property:</entry>
  <entry><property>com.xmlcalabash.entity-resolver</property>=<replaceable>classname</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="starttag">cc:entity-resolver</tag><replaceable>classname</replaceable><tag class="endtag">cc:entity-resolver</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="emptytag">calabash <tag class="attribute">entityResolver</tag>="<tag class="attvalue"><replaceable>classname</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The class specified will be instantiated and used as the entity resolver
for all XML documents accessed.</para>
</section>

<section xml:id="cfg.uri-resolver">
<title>URI resolver</title>

<para>There are four ways to specify the URI resolver:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--uri-resolver</literal>=<replaceable>classname</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-U</literal><replaceable>classname</replaceable></entry>
</row>
<row>
  <entry>Java system property:</entry>
  <entry><property>com.xmlcalabash.uri-resolver</property>=<replaceable>classname</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="starttag">cc:uri-resolver</tag><replaceable>classname</replaceable><tag class="endtag">cc:uri-resolver</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="emptytag">calabash <tag class="attribute">uriResolver</tag>="<tag class="attvalue"><replaceable>classname</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The class specified will be instantiated and used as the URI resolver
for all URIs accessed.</para>
</section>


<section xml:id="cfg.extension">
<title>Extension</title>

<para>There are four ways to specify extensions:</para>


<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--extension</literal>=<replaceable>extname</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-X</literal><replaceable>extname</replaceable></entry>
</row>
<row>
  <entry morerows="4" valign="top">Java system properties:</entry>
  <entry><property>com.xmlcalabash.general-values</property>=<replaceable>boolean</replaceable></entry>
</row>
<row>
  <entry><property>com.xmlcalabash.xpointer-on-text</property>=<replaceable>boolean</replaceable></entry>
</row>
<row>
  <entry><property>com.xmlcalabash.transparent-json</property>=<replaceable>boolean</replaceable></entry>
</row>
<row>
  <entry><property>com.xmlcalabash.json-flavor</property>=<replaceable>flavor</replaceable></entry>
</row>
<row>
  <entry><property>com.xmlcalabash.use-xslt-10</property>=<replaceable>boolean</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:extension <tag class="attribute">name</tag>="<tag class="attvalue"><replaceable>extensions-names</replaceable></tag>" <tag class="attribute">value</tag>="<tag class="attvalue"><replaceable>boolean</replaceable></tag>"</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="emptytag">calabash
           <tag class="attribute">generalValues</tag>="<tag class="attvalue"><replaceable>Ant boolean</replaceable></tag>"
           <tag class="attribute">xPointerOnText</tag>="<tag class="attvalue"><replaceable>Ant boolean</replaceable></tag>"
           <tag class="attribute">transparentJSON</tag>="<tag class="attvalue"><replaceable>Ant boolean</replaceable></tag>"
           <tag class="attribute">jsonFlavor</tag>="<tag class="attvalue"><replaceable>flavor</replaceable></tag>"
           <tag class="attribute">useXslt10</tag>="<tag class="attvalue"><replaceable>Ant boolean</replaceable></tag>"
         </tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>Valid extension names are
“<literal><link linkend="ext.general-values">general-values</link></literal>”,
“<literal><link linkend="ext.xpointer-on-text">xpointer-on-text</link></literal>”,
“<literal><link linkend="ext.transparent-json">transparent-json</link></literal>”,
“<literal>json-flavor</literal>”,
and “<literal><link linkend="ext.use-xslt-10">use-xslt-10</link></literal>”.</para>

</section>

<section xml:id="cfg.binding">
<title>Binding</title>

<para>There are two ways to specify a namespace binding in the configuration:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--binding</literal> <replaceable>prefix</replaceable>=<replaceable>uri</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-b</literal><replaceable>prefix</replaceable>=<replaceable>uri</replaceable></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="starttag">calabash</tag>
         <tag class="emptytag">namespace
           <tag class="attribute">prefix</tag>="<tag class="attvalue"><replaceable>prefix</replaceable></tag>"
           <tag class="attribute">uri</tag>="<tag class="attvalue"><replaceable>uri</replaceable></tag>"
         </tag>
         <tag class="endtag">calabash</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>These bindings apply (only) to the options, parameters, and step
names (if any) specified on the command line or in the Ant task. For convenience, the
prefix “<literal>p</literal>” is bound to the XProc namespace by
default.</para>

<para>Namespaces in the XML configuration are bound by the normal, XML
means.</para>

</section>


<section xml:id="cfg.parameter">
<title>Parameter</title>

<para>There are three ways to specify a parameter in the configuration:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--with-param</literal> <replaceable>port@</replaceable><replaceable>name</replaceable>=<replaceable>value</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-p</literal><replaceable>port@</replaceable><replaceable>name</replaceable>=<replaceable>value</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:with-param
<tag class="attribute"><replaceable>port</replaceable></tag>="<tag class="attvalue"><replaceable>portname</replaceable></tag>"
<tag class="attribute">name</tag>="<tag class="attvalue"><replaceable>paramname</replaceable></tag>"
<tag class="attribute">value</tag>="<tag class="attvalue"><replaceable>string</replaceable></tag>"</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="starttag">calabash</tag>
         <tag class="emptytag">parameter
           <tag class="attribute">port</tag>="<tag class="attvalue"><replaceable>portname</replaceable></tag>"
           <tag class="attribute">name</tag>="<tag class="attvalue"><replaceable>paramname</replaceable></tag>"
           <tag class="attribute">value</tag>="<tag class="attvalue"><replaceable>string</replaceable></tag>"
         </tag>
         <tag class="endtag">calabash</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>All parameters specified will be bound to either the specified
parameter input port or the the primary parameter input port if no
explicit port is specified.</para>

<para>If the name attribute contains an at sign, the port specification must be
given explicitly. To specify the primary parameter input port explicitly,
write "<literal>*</literal>" as the port.</para>
</section>

<section xml:id="cfg.input">
<title>Input</title>

<para>There are three ways to specify an input binding in the configuration:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--input</literal> <replaceable>port</replaceable>=<replaceable>uri</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-i</literal><replaceable>port</replaceable>=<replaceable>uri</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:input
<tag class="attribute">port</tag>="<tag class="attvalue"><replaceable>portname</replaceable></tag>"
<tag class="attribute">href</tag>="<tag class="attvalue"><replaceable>uri</replaceable></tag>"</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry>For detailed information on how to specify input and output files in the Ant task, see <xref linkend="ant.input-and-output"/> and <xref linkend="ant.input"/></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The input specified must be an XML document. The string
“<literal>-</literal>” may be used for exactly one input URI to bind
that input to <literal>stdin</literal>.</para>

<para>If the input binding for a particular port is repeated, all of the inputs
specified will appear on that port as a sequence of documents.</para>

<para>If the uri does not contain an equals sign, the port specification can be
left out and the input will be applied to the primary non-parameter input port.</para>
</section>


<section xml:id="cfg.data-input">
<title>Data input</title>

<para>There are two ways to specify a non-XML input binding in the configuration:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--data-input</literal> <replaceable>contentType</replaceable>@<replaceable>port</replaceable>=<replaceable>uri</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-d</literal><replaceable>contentType</replaceable>@<replaceable>port</replaceable>=<replaceable>uri</replaceable></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry>For detailed information on how to specify input and output files in the Ant task, see <xref linkend="ant.input-and-output"/> and <xref linkend="ant.input"/></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>If the port and uri do not contain an at sign, the contentType specification can be
left out. In this case the content type will be determined from the contents of the URI.
If the content type cannot be determined from the contents of the URI, the content type
is guessed from the URI name. If the content type cannot be guessed from the URI name,
it is set to "<literal>application/octet-stream</literal>". If you have to give an explicit
content type because the port or uri contain an at sign, but you don't know the content
type, you can set it to "<literal>content/unknown</literal>" which is the same as leaving
it out and will try to determine the content type from content or name.</para>

<para>If the detected or explicitly specified content type is equal to
<literal>application/xml</literal>, ends in <literal>+xml</literal>, starts with
<literal>text/</literal> or has a charset of <literal>utf-8</literal> specified,
the input is treated as text, otherwise the input gets base64 encoded automatically
before it is given to the pipeline.</para>

<para>If the uri does not contain an equals sign, the port specification can be
left out and the input will be applied to the primary non-parameter input port.</para>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.output">
<title>Output</title>

<para>There are three ways to specify an output binding in the configuration:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--output</literal> <replaceable>port</replaceable>=<replaceable>uri</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-o</literal><replaceable>port</replaceable>=<replaceable>uri</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:output
<tag class="attribute">port</tag>="<tag class="attvalue"><replaceable>portname</replaceable></tag>"
<tag class="attribute">href</tag>="<tag class="attvalue"><replaceable>uri</replaceable></tag>"</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry>For detailed information on how to specify input and output files in the Ant task, see <xref linkend="ant.input-and-output"/> and <xref linkend="ant.output"/></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The result(s) that appear on the named output port will be written to
the specified URI. The string
“<literal>-</literal>” may be used for exactly one output URI to bind
that output to <literal>stdout</literal>.</para>

<para>If the uri does not contain an equals sign, the port specification can be
left out and the output will be applied to the primary output port.</para>
</section>

<section xml:id="cfg.library">
<title>Library</title>

<para>There are two ways to load a library in the configuration:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--library</literal>=<replaceable>uri</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-l</literal><replaceable>uri</replaceable></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="starttag">calabash</tag><tag class="starttag">library</tag><replaceable>library resources</replaceable><tag class="endtag">library</tag><tag class="endtag">calabash</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The steps in the library loaded are only available in
<option>--step</option> options. If no steps are specified,
the first step of the first loaded library will be used.</para>
</section>

<section xml:id="cfg.step">
<title>Step</title>

<para>There are two ways to load steps in the configuration:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--step</literal>=<replaceable>stepname</replaceable></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-s</literal><replaceable>stepname</replaceable></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="starttag">calabash</tag><tag class="emptytag">step <tag class="attribute">name</tag>="<tag class="attvalue"><replaceable>stepname</replaceable></tag>"</tag><tag class="endtag">calabash</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>Steps loaded on the command line may come from the optional library. They must have a single
primary input and a single primary output. They are treated as if they appeared sequentially in
a <tag>p:pipeline</tag>.</para>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.pipeline">
<title>Pipeline</title>

<para>There are two ways to specify a pipeline in the configuration:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line:</entry>
  <entry><replaceable>pipeline-uri</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="starttag">cc:pipeline</tag><replaceable>pipeline-uri</replaceable><tag class="endtag">cc:pipeline</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry>
    <tag class="emptytag">calabash <tag class="attribute">pipeline</tag>="<tag class="attvalue"><replaceable>pipeline-path</replaceable></tag>"</tag>
    or
    <tag class="starttag">calabash</tag><tag class="starttag">pipeline</tag><replaceable>pipeline resource</replaceable><tag class="endtag">pipeline</tag><tag class="endtag">calabash</tag>
    For more information see, <xref linkend="ant.pipeline"/>
  </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The first non-option command line argument is interpreted as the pipeline URI.</para>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.option">
<title>Option</title>

<para>There are two ways to specify option values in the configuration:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line:</entry>
  <entry><replaceable>name</replaceable>=<replaceable>value</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:with-option
<tag class="attribute">name</tag>="<tag class="attvalue"><replaceable>optname</replaceable></tag>"
<tag class="attribute">value</tag>="<tag class="attvalue"><replaceable>string</replaceable></tag>"</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry><tag class="starttag">calabash</tag>
         <tag class="emptytag">option
           <tag class="attribute">name</tag>="<tag class="attvalue"><replaceable>optname</replaceable></tag>"
           <tag class="attribute">value</tag>="<tag class="attvalue"><replaceable>string</replaceable></tag>"
         </tag>
         <tag class="endtag">calabash</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.profile-file">
<title>Profile File</title>

<para>There are three ways to specify the profile file in the configuration:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line:</entry>
  <entry><literal>--profile</literal>=<replaceable>filename</replaceable></entry>
</row>
<row>
  <entry>Java system property:</entry>
  <entry><property>com.xmlcalabash.profile</property>=<replaceable>filename</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="starttag">cc:profile</tag><replaceable>filename</replaceable><tag class="endtag">cc:profile</tag></entry>
</row>
<row>
  <entry>Ant task:</entry>
  <entry>
    <tag class="emptytag">calabash <tag class="attribute">profileFile</tag>="<tag class="attvalue"><replaceable>filename</replaceable></tag>"</tag>
    or
    <tag class="starttag">calabash</tag><tag class="starttag">profile</tag><replaceable>profile resource</replaceable><tag class="endtag">profile</tag><tag class="endtag">calabash</tag>
  </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>If this parameter is set, the execution time for all executed steps is recorded and written to the specified XML file. The filename can also be "<literal>-</literal>" which causes the profile information to be written to stdout.</para>
</section>

<section xml:id="cfg.version">
<title>Version</title>

<para>There are two ways to make Calabash show its version information:</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Command line (long):</entry>
  <entry><literal>--version</literal></entry>
</row>
<row>
  <entry>Command line (short):</entry>
  <entry><literal>-v</literal></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>If this parameter is given, Calabash shows some information about itself before starting its real work.</para>
</section>

<!-- ====== -->

<section xml:id="cfg.step-error-listener">
<title>Step error listener</title>

<para>The step error listener can be specified in the configuration file.</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:step-error-listener <tag class="attribute">class-name</tag>="<tag class="attvalue"><replaceable>classname</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.serialization">
<title>Serialization options</title>

<para>All of the XML serialization options can be specified with system properties or
specified in the configuration file.</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>Java system properties:</entry>
  <entry><property>com.xmlcalabash.serial.<replaceable>option</replaceable></property>=<replaceable>value</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:serialization <tag class="attribute"><replaceable>option</replaceable></tag>="<tag class="attvalue"><replaceable>value</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The option names supported on both system properties and <tag>cc:serialization</tag> are:
<literal>byte-order-mark</literal>,
<literal>doctype-public</literal>,
<literal>doctype-system</literal>,
<literal>encoding</literal>,
<literal>escape-uri-attributes</literal>,
<literal>include-content-type</literal>,
<literal>indent</literal>,
<literal>media-type</literal>,
<literal>normalization-form</literal>,
<literal>omit-xml-declaration</literal>,
<literal>standalone</literal>,
<literal>undeclare-prefixes</literal>, and
<literal>version</literal>.
In addition, the <literal>cdata-section-elements</literal> option is supported on
<tag>cc:serialization</tag>. (It's only supported in the configuration file because the
values are QNames.)</para>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.extension-function">
<title>Extension function</title>

<para>Extension functions are specified in the configuration file.</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:extenion-function <tag class="attribute">class-name</tag>="<tag class="attvalue"><replaceable>classname</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.fo-processor">
<title>FO processor</title>

<para>The FO Processor is specified in the configuration file.</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:fo-processor <tag class="attribute">class-name</tag>="<tag class="attvalue"><replaceable>classname</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.css-processor">
<title>CSS processor</title>

<para>The CSS processor is specified in the configuration file. </para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:css-processor <tag class="attribute">class-name</tag>="<tag class="attvalue"><replaceable>classname</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.xproc-configurer">
<title>XProc configurer</title>

<para>The XProcConfigurer is specified in the configuration file.</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:xproc-configurer <tag class="attribute">class-name</tag>="<tag class="attvalue"><replaceable>classname</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.default-system-property">
<title>Default system property</title>

<para>Default system properties can be specified in the configuration file.</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:default-system-property <tag class="attribute">name</tag>="<tag class="attvalue"><replaceable>property-name</replaceable></tag>" <tag class="attribute">value</tag>="<tag class="attvalue"><replaceable>default-value</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.html-parser">
<title>HTML parser</title>

<para>The HTML parser is specified in the configuration file.</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:html-parser <tag class="attribute">value</tag>="<tag class="attvalue"><replaceable>parser</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The <replaceable>parser</replaceable> must be “<literal>validator.nu</literal>” or
“<literal>tagsoup</literal>”.</para>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.saxon-configuration-property">
<title>Saxon configuration property</title>

<para>Saxon configuration properties (Features) can be specified in the configuration file.</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:saxon-configuration-property
<tag class="attribute">key</tag>="<tag class="attvalue"><replaceable>key</replaceable></tag>"
<tag class="attribute">value</tag>="<tag class="attvalue"><replaceable>value</replaceable></tag>"
<tag class="attribute">type</tag>="<tag class="attvalue"><replaceable>type</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>Where “<replaceable>key</replaceable>” is a Saxon <classname>FeatureKey</classname> and
“<replaceable>type</replaceable>” is “<literal>integer</literal>”, “<literal>boolean</literal>”,
or “<literal>string</literal>”.</para>

<para>Setting Saxon features through this interface may have unanticipated consequences, use with
care.</para>

<para>T.B.D.</para>
</section>

<section xml:id="cfg.">
<title>Send mail configuration</title>

<para>There are two ways to specify the SMTP configuration for sending mail.</para>

<informaltable frame="none" role="cfgprop">
<tgroup cols="2" colsep="0" rowsep="0">
<tbody>
<row>
  <entry morerows="3" valign="top">Java system properties:</entry>
  <entry><property>com.xmlcalabash.mail-host</property>=<replaceable>hostname</replaceable></entry>
</row>
<row>
  <entry><property>com.xmlcalabash.mail-port</property>=<replaceable>portnumber</replaceable></entry>
</row>
<row>
  <entry><property>com.xmlcalabash.mail-username</property>=<replaceable>name</replaceable></entry>
</row>
<row>
  <entry><property>com.xmlcalabash.mail-password</property>=<replaceable>password</replaceable></entry>
</row>
<row>
  <entry>XML configuration:</entry>
  <entry><tag class="emptytag">cc:saxon-configuration-property
<tag class="attribute"><replaceable>host</replaceable></tag>="<tag class="attvalue"><replaceable>hostname</replaceable></tag>"
<tag class="attribute"><replaceable>port</replaceable></tag>="<tag class="attvalue"><replaceable>portnumber</replaceable></tag>"
<tag class="attribute"><replaceable>username</replaceable></tag>="<tag class="attvalue"><replaceable>name</replaceable></tag>"
<tag class="attribute"><replaceable>password</replaceable></tag>="<tag class="attvalue"><replaceable>password</replaceable></tag>"</tag></entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>If you specify a <tag class="attribute">username</tag>, you must specify a
<tag class="attribute">password</tag>, otherwise all the properties are optional. Any unspecified
properties will be defaulted by JavaMail to whatever defaults JavaMail uses.</para>

<para>T.B.D.</para>
</section>

</chapter>
