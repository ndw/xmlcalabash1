<?xml version="1.0" encoding="UTF-8"?>
<project name="calabash" default="default" basedir="."
         xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <description>
    Ant build script for XML Calabash.

    Useful targets:

    compile - compiles :-)
    jar     - makes the jar
    dist    - makes a distribution jar/zip (requires IzPack)
    report  - run the test suite and produce the report
  </description>

  <property file="resources/etc/vendor.properties"/>
  <property file="resources/etc/version.properties"/>

  <property name="version" value="${version.major}.${version.minor}.${version.release}"/>

  <!-- so I can point to a directory containing commercial jars -->
  <property name="lib.dir" value="lib"/>

  <property name="dist.dir" value="dist"/>
  <property name="build.dir" value="out/production/Calabash"/>

  <!-- where my Saxon EE license lives -->
  <property name="license.dir" value="/Users/ndw/java"/>

  <property name="tests.root" value="http://tests.xproc.org"/>
  <property name="test.report" value="test/report.xml"/>
  <property name="test.errors" value="test/errors.txt"/>
  <property name="test.format" value="test/report.html"/>
  <property name="submit.username" value="calabash"/>
  <property name="submit.password" value=""/>

  <!-- Whether to include debugging information when compiling. -->
  <property name="javac.debug" value="false"/>

  <property name="izpack.dir" value="/Applications/IzPack"/>

  <available property="izpack.present"
             classname="com.izforge.izpack.ant.IzPackTask"
             classpath="${izpack.dir}/lib/compiler.jar"/>

  <target name="izpacktool" if="izpack.present">
    <taskdef name="izpack"
             classpath="${izpack.dir}/lib/compiler.jar"
             classname="com.izforge.izpack.ant.IzPackTask"/>
  </target>

  <target name="izpackmissing" unless="izpack.present">
    <echo>Cannot find IzPack; request to build dist ignored.</echo>
  </target>

  <target name="maven-properties" depends="init">
    <!-- define Maven coordinates -->
    <property name="groupId" value="com.xmlcalabash" />
    <property name="artifactId" value="xmlcalabash" />
    <property name="mvn-version" value="${version}-${saxon-version-short}"/>

    <!-- define artifact names, which follow the convention of Maven -->
    <property name="maven.dir" value="${dist.dir}/maven" />
    <property name="maven-jar" value="${maven.dir}/${artifactId}-${mvn-version}.jar" />
    <property name="maven-javadoc-jar" value="${maven.dir}/${artifactId}-${mvn-version}-javadoc.jar" />
    <property name="maven-sources-jar" value="${maven.dir}/${artifactId}-${mvn-version}-sources.jar" />

    <!-- define maven snapshots and staging repository id and url -->
    <property name="maven-snapshots-repository-id" value="sonatype-nexus-snapshots" />
    <property name="maven-snapshots-repository-url"
              value="https://oss.sonatype.org/content/repositories/snapshots/" />
    <property name="maven-staging-repository-id" value="sonatype-nexus-staging" />
    <property name="maven-staging-repository-url"
              value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
  </target>

  <path id="build.classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${ant.library.dir}/ant.jar"/>
  </path>

  <path id="full.classpath">
    <pathelement location="${license.dir}"/>
    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <available property="saxon94"
             classname="net.sf.saxon.expr.flwor.ForClause">
    <classpath refid="build.classpath"/>
  </available>

  <pathconvert property="run.classpath" refid="build.classpath" pathsep=" ">
    <map from="${basedir}/" to=""/>
  </pathconvert>

  <target name="default" depends="jar"/>

  <target name="init" depends="saxon-version">
    <mkdir dir="${build.dir}"/>
    <property name="dist-version" value="${version}-${saxon-version-short}"/>
    <property name="install.dir" value="${dist.dir}/calabash-${dist-version}"/>
  </target>

  <target name="saxon94" if="saxon94">
    <property name="saxon-version-short" value="94"/>
    <property name="saxon-version" value="9.4.0.7"/>
  </target>

  <target name="saxon93" unless="saxon94">
    <property name="saxon-version-short" value="93"/>
    <property name="saxon-version" value="9.3.0"/>
  </target>

  <target name="saxon-version" depends="saxon93,saxon94">
    <echo>Currently using saxon ${saxon-version}</echo>
  </target>

  <target name="update-output">
    <copy todir="${build.dir}/etc">
      <fileset dir="resources/etc">
        <exclude name="install-proto.xsl"/>
      </fileset>
    </copy>
  </target>

  <target name="jar" depends="compile">
    <taskdef resource="aQute/bnd/ant/taskdef.properties">
      <classpath>
        <fileset dir="osgi" includes="bnd-*.jar"/>
      </classpath>
    </taskdef>
    <bnd
      classpath="${build.dir}"
      eclipse="false"
      failok="false"
      exceptions="true"
      files="osgi/calabash.bnd"
      output="calabash.jar"/>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <target name="distclean" depends="init">
    <delete dir="${dist.dir}"/>
  </target>

  <target name="compile" depends="init,optional-features,update-output">
    <!-- debugging
    <property name="theclasspath" refid="build.classpath"/>
    <echo>Classpath: ${theclasspath}</echo>
    -->

    <javac destdir="${build.dir}"
	   classpathref="build.classpath"
           source="1.6" target="1.6" includeantruntime="false"
	   debug="${javac.debug}">
      <!--
      <compilerarg value="-Xlint"/>
      -->
      <src path="src"/>
      <!-- Optional features -->
      <exclude name="com/xmlcalabash/extensions/MetadataExtractor.java"/>
      <exclude name="com/xmlcalabash/extensions/DeltaXML.java"/>
      <exclude name="com/xmlcalabash/extensions/SendMail.java"/>
      <exclude name="com/xmlcalabash/extensions/xmlunit/Compare.java"/>
      <exclude name="com/xmlcalabash/extensions/marklogic/XCCAdhocQuery.java"/>
      <exclude name="com/xmlcalabash/extensions/marklogic/XCCInsertDocument.java"/>
      <exclude name="com/xmlcalabash/extensions/marklogic/XCCInvokeModule.java"/>
      <exclude name="com/xmlcalabash/util/FoXEP.java"/>
      <exclude name="com/xmlcalabash/util/FoFOP.java"/>
      <exclude name="com/xmlcalabash/util/FoAH.java"/>
      <exclude name="com/xmlcalabash/util/CssAH.java"/>
      <exclude name="com/xmlcalabash/util/CssPrince.java"/>

      <!-- Only for debugging -->
      <exclude name="com/xmlcalabash/drivers/SaxonProblem.java"/>
    </javac>
  </target>

  <!-- this target won't work unless you have all the optional/commercial jars -->
  <target name="compile-everything" depends="init,update-output">
    <javac destdir="${build.dir}"
           source="1.6" target="1.6" includeantruntime="false">
      <classpath>
        <!-- Yes, I know these are explicit. This target is really only for me. -->
        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <src path="src"/>
      <!-- <compilerarg value="-Xlint:unchecked"/> -->
      <!-- Only for debugging -->
      <exclude name="com/xmlcalabash/drivers/SaxonProblem.java"/>
    </javac>
  </target>

  <target name="optional-features" depends="compile-MetadataException,
                                            compile-XEP,compile-FOP,compile-AH,compile-SendMail,
                                            compile-DeltaXML,compile-XMLUnit,compile-XCC"/>

  <condition property="XMLUnit.present">
    <and>
      <available classname="org.custommonkey.xmlunit.XMLAssert">
        <classpath refid="build.classpath"/>
      </available>
      <available classname="junit.framework.AssertionFailedError">
        <classpath refid="build.classpath"/>
      </available>
    </and>
  </condition>

  <target name="compile-XMLUnit" depends="init" if="XMLUnit.present">
    <javac destdir="${build.dir}"
	   classpathref="build.classpath"
           source="1.6" target="1.6" includeantruntime="false">
      <src path="src"/>
      <include name="com/xmlcalabash/extensions/xmlunit/Compare.java"/>
    </javac>
  </target>

  <available classname="com.marklogic.xcc.ContentSource" property="MarkLogicXCC.present">
    <classpath refid="build.classpath"/>
  </available>

  <target name="compile-XCC" depends="init" if="MarkLogicXCC.present">
    <javac destdir="${build.dir}"
	   classpathref="build.classpath"
           source="1.6" target="1.6" includeantruntime="false">
      <src path="src"/>
      <include name="com/xmlcalabash/extensions/marklogic/XCCAdhocQuery.java"/>
      <include name="com/xmlcalabash/extensions/marklogic/XCCInsertDocument.java"/>
      <include name="com/xmlcalabash/extensions/marklogic/XCCInvokeModule.java"/>
    </javac>
  </target>

  <available classname="com.drew.metadata.MetadataException" property="MetadataException.present">
    <classpath refid="build.classpath"/>
  </available>

  <target name="compile-MetadataException" depends="init" if="MetadataException.present">
    <javac destdir="${build.dir}"
	   classpathref="build.classpath"
           source="1.6" target="1.6" includeantruntime="false">
      <!--
      <compilerarg value="-Xlint"/>
      -->
      <src path="src"/>
      <include name="com/xmlcalabash/extensions/MetadataExtractor.java"/>
    </javac>
  </target>

  <available classname="com.deltaxml.core.DXPConfiguration" property="DeltaXML.present">
    <classpath refid="build.classpath"/>
  </available>

  <target name="compile-DeltaXML" depends="init" if="DeltaXML.present">
    <javac destdir="${build.dir}"
	   classpathref="build.classpath"
           source="1.6" target="1.6" includeantruntime="false">
      <src path="src"/>
      <include name="com/xmlcalabash/extensions/DeltaXML.java"/>
    </javac>
  </target>

  <available classname="com.renderx.xep.FormatterImpl" property="XEP.present">
    <classpath refid="build.classpath"/>
  </available>

  <target name="compile-XEP" depends="init" if="XEP.present">
    <javac destdir="${build.dir}"
	   classpathref="build.classpath"
           source="1.6" target="1.6" includeantruntime="false">
      <src path="src"/>
      <include name="com/xmlcalabash/util/FoXEP.java"/>
    </javac>
  </target>

  <available classname="jp.co.antenna.XfoJavaCtl.XfoObj" property="AH.present">
    <classpath refid="build.classpath"/>
  </available>

  <target name="compile-AH" depends="init" if="AH.present">
    <javac destdir="${build.dir}"
	   classpathref="build.classpath"
           source="1.6" target="1.6" includeantruntime="false">
      <src path="src"/>
      <include name="com/xmlcalabash/util/FoAH.java"/>
      <include name="com/xmlcalabash/util/CssAH.java"/>
    </javac>
  </target>

  <available classname="com.princexml.Prince" property="Prince.present">
    <classpath refid="build.classpath"/>
  </available>

  <target name="compile-Prince" depends="init" if="Prince.present">
    <javac destdir="${build.dir}"
	   classpathref="build.classpath"
           source="1.6" target="1.6" includeantruntime="false">
      <src path="src"/>
      <include name="com/xmlcalabash/util/CssPrince.java"/>
    </javac>
  </target>

  <available classname="javax.mail.Address" property="Mail.present">
    <classpath refid="build.classpath"/>
  </available>

  <target name="compile-SendMail" depends="init" if="Mail.present">
    <javac destdir="${build.dir}"
	   classpathref="build.classpath"
           source="1.6" target="1.6" includeantruntime="false">
      <src path="src"/>
      <include name="com/xmlcalabash/extensions/SendMail.java"/>
    </javac>
  </target>

  <condition property="FOP.present">
    <!-- It probably requires more than these, but if you've got all these... -->
    <and>
      <available classname="org.apache.fop.apps.Fop">
        <classpath refid="build.classpath"/>
      </available>
      <available classname="org.apache.fop.apps.FopFactory">
        <classpath refid="build.classpath"/>
      </available>
      <available classname="org.apache.fop.apps.MimeConstants">
        <classpath refid="build.classpath"/>
      </available>
      <available classname="org.apache.xmlgraphics.util.MimeConstants">
        <classpath refid="build.classpath"/>
      </available>
    </and>
  </condition>

  <target name="compile-FOP" depends="init" if="FOP.present">
    <javac destdir="${build.dir}"
	   classpathref="build.classpath"
           source="1.6" target="1.6" includeantruntime="false">
      <src path="src"/>
      <include name="com/xmlcalabash/util/FoFOP.java"/>
    </javac>
  </target>

  <available property="docs.present" file="${dist.dir}/calabash-${version}/README"/>

  <target name="docs.missing" unless="docs.present">
    <echo>You must run the 'dist' target on the 'docs' branch first.</echo>
  </target>

  <condition property="dist.ready">
    <and>
      <istrue value="${docs.present}"/>
      <istrue value="${izpack.present}"/>
    </and>
  </condition>

  <target name="dist"
          depends="init,izpacktool,izpackmissing,docs.missing"
          if="dist.ready">
    <ant target="distrib"/>
    <delete file="${dist.dir}/install.xml"/>

    <xslt in="resources/etc/install-proto.xsl" style="resources/etc/install-proto.xsl"
          out="${dist.dir}/install.xml">
      <param name="version.label" expression="${dist-version}"/>
    </xslt>

    <echo file="${install.dir}/calabash">#!/bin/sh
java -Xmx1024m -jar %INSTALL_PATH/calabash.jar "$@"
    </echo>

    <echo file="${install.dir}/calabash.bat">
@java -Xmx1024m -jar "%INSTALL_PATH\calabash.jar" %*
    </echo>

    <izpack input="${dist.dir}/install.xml"
            output="${dist.dir}/calabash-${dist-version}.jar"
            installerType="standard"
            basedir="${dist.dir}"
            izPackDir="${izpack.dir}"/>
  </target>

  <target name="distrib" depends="compile-everything,jar">
    <mkdir dir="${install.dir}"/>
    <mkdir dir="${install.dir}/lib"/>
    <mkdir dir="${install.dir}/docs"/>
    <mkdir dir="${install.dir}/schemas"/>
    <mkdir dir="${install.dir}/xpl"/>

    <mkdir dir="${install.dir}/docs/notices"/>
    <mkdir dir="${install.dir}/docs/reference"/>
    <copy todir="${install.dir}">
      <fileset file="${dist.dir}/calabash-${version}/README"/>
    </copy>
    <copy todir="${install.dir}/docs/notices">
      <fileset dir="${dist.dir}/calabash-${version}/docs/notices"/>
    </copy>
    <copy todir="${install.dir}/docs/reference">
      <fileset dir="${dist.dir}/calabash-${version}/docs/reference"/>
    </copy>

    <copy todir="${install.dir}" file="calabash.jar"/>

    <copy todir="${install.dir}/lib">
      <fileset file="lib/commons*.jar"/>
      <fileset file="lib/http*.jar"/>
      <fileset file="lib/xmlresolver.jar"/>
      <fileset file="lib/saxon9he.jar"/>
    </copy>

    <copy todir="${install.dir}/xpl">
      <fileset file="xpl/**xpl">
        <exclude name="submit-test-report.xpl"/>
      </fileset>
    </copy>

    <copy todir="${install.dir}/schemas">
      <fileset file="resources/schemas/**"/>
    </copy>

    <echo file="${install.dir}/VERSION">${dist-version}</echo>

    <zip destfile="${dist.dir}/calabash-${dist-version}.zip"
         basedir="${dist.dir}"
         includes="calabash-${dist-version}/**"/>
  </target>

  <target name="test" depends="jar">
    <echo>Running test...</echo>
    <java fork="true" classname="com.xmlcalabash.drivers.RunTestReport">
      <classpath>
        <pathelement location="calabash.jar"/>
        <path refid="full.classpath"/>
      </classpath>
      <jvmarg value="-Xmx1024m"/>
      <jvmarg value="-Djava.util.logging.config.file=/Users/ndw/java/logging.properties"/>
      <arg value="-D"/>
      <arg value="-a"/>
      <arg value="http://tests.xproc.org/tests/serialization/version-001.xml"/>
    </java>
  </target>

  <target name="test-suite" depends="jar">
    <echo>Running test-suite...this may take a few minutes...</echo>
    <echo>  Sending report to ${test.report}; errors to ${test.errors}</echo>
    <java fork="true" classname="com.xmlcalabash.drivers.RunTestReport"
          output="${test.report}" error="${test.errors}">
      <classpath>
        <pathelement location="calabash.jar"/>
        <path refid="full.classpath"/>
      </classpath>
      <jvmarg value="-Xmx1024m"/>
      <arg value="-D"/>
      <arg value="-a"/>
      <arg value="${tests.root}/tests/required/test-suite.xml"/>
      <arg value="${tests.root}/tests/serialization/test-suite.xml"/>
      <arg value="${tests.root}/tests/optional/test-suite.xml"/>
      <arg value="${tests.root}/tests/extension/test-suite.xml"/>
      <arg value="http://xmlcalabash.com/tests/test-suite.xml"/>
<!--
      <arg value="http://localhost:8130/tests/test-suite.xml"/>
-->
    </java>
  </target>

  <target name="report" depends="test-suite">
    <java fork="true" classname="net.sf.saxon.Transform">
      <classpath refid="full.classpath"/>
      <arg value="-o:${test.format}"/>
      <arg value="-s:${test.report}"/>
      <arg value="-xsl:resources/format-report.xsl"/>
    </java>
    <echo>Report is in ${test.format}</echo>
  </target>

  <target name="publish-report" depends="test-suite">
    <java fork="true" classname="com.xmlcalabash.drivers.Main">
      <classpath>
        <pathelement location="calabash.jar"/>
        <path refid="full.classpath"/>
      </classpath>
      <jvmarg value="-Xmx1024m"/>
      <arg value="-isource=${test.report}"/>
      <arg value="xpl/submit-test-report.xpl"/>
      <arg value="username=${submit.username}"/>
      <arg value="password=${submit.password}"/>
    </java>
  </target>

  <target name="javadoc" depends="init,compile-everything"
          description="Compile JavaDoc">
    <javadoc sourcepath="src" destdir="${build.dir}/javadoc"
             classpathref="build.classpath"/>
  </target>

  <target name="maven-dist" depends="maven-properties,compile-everything,jar,javadoc"
          description="generate Maven jars">
    <!-- copy the main artifact -->
    <copy file="calabash.jar" toFile="${maven-jar}"/>

    <!-- build the sources artifact -->
    <jar jarfile="${maven-sources-jar}">
      <fileset dir="src" />
    </jar>

    <!-- build the javadoc artifact -->
    <jar jarfile="${maven-javadoc-jar}">
      <fileset dir="${build.dir}/javadoc" />
    </jar>

    <!-- Update the version in the POM -->
    <copy file="pom.xml" toFile="${maven.dir}/pom.xml">
      <filterset>
        <filter token="version" value="${mvn-version}"/>
        <filter token="saxon-version" value="${saxon-version}"/>
      </filterset>
    </copy>
  </target>

  <target name="maven-stage" depends="maven-dist"
          description="deploy release version to Maven staging repository">
    <!-- sign and deploy the main artifact -->
    <input message="Please enter your GPG passphrase:" addproperty="passphrase">
      <handler type="secure"/>
    </input>

    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-staging-repository-url}" />
      <arg value="-DrepositoryId=${maven-staging-repository-id}" />
      <arg value="-DpomFile=${maven.dir}/pom.xml" />
      <arg value="-Dfile=${maven-jar}" />
      <arg value="-Dgpg.passphrase=${passphrase}"/>
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the sources artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-staging-repository-url}" />
      <arg value="-DrepositoryId=${maven-staging-repository-id}" />
      <arg value="-DpomFile=${maven.dir}/pom.xml" />
      <arg value="-Dfile=${maven-sources-jar}" />
      <arg value="-Dclassifier=sources" />
      <arg value="-Dgpg.passphrase=${passphrase}"/>
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the javadoc artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-staging-repository-url}" />
      <arg value="-DrepositoryId=${maven-staging-repository-id}" />
      <arg value="-DpomFile=${maven.dir}/pom.xml" />
      <arg value="-Dfile=${maven-javadoc-jar}" />
      <arg value="-Dclassifier=javadoc" />
      <arg value="-Dgpg.passphrase=${passphrase}"/>
      <arg value="-Pgpg" />
    </artifact:mvn>
  </target>
</project>
