buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dev.saxonica.com/maven" }
  }

  dependencies {
    classpath fileTree(dir: 'lib').include("*.jar")
    classpath group: saxonGroup, name: saxonName, version: saxonVersion
    classpath group: 'biz.aQute.bnd', name: 'biz.aQute.bnd.gradle', version: '6.2.0'
  }
}

plugins {
  id "java"
  id "maven-publish"
  id "signing"
  id "com.bmuschko.izpack" version "3.2"
  id "de.undercouch.download" version "4.1.1"
}

apply plugin: 'biz.aQute.bnd.builder'

project.ext.releaseVersion = relVersion
project.ext.distVersion = relVersion + "-" + saxonBranch
project.ext.refDocZip = 'xmlcalabash-ref-' + docsVersion + '.zip'

relVersion = project.ext.distVersion

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

repositories {
  // For the dependency on xmlcalabash1-print
  // For javax.media:jai_core:1.1.3
  maven { url "https://maven.geotoolkit.org" }
  // For com.sun.media:jai-codec:1.1.3
  maven { url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/" }

  mavenLocal()
  mavenCentral()
  maven { url "https://maven.restlet.talend.com" }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
  maven { url "https://dev.saxonica.com/maven" }
}

configurations {
  reportruntime.extendsFrom(runtimeOnly)
  projectRuntimeClasspath.extendsFrom(runtimeOnly)
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
    force "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
  }
}

dependencies {
  izpack 'org.codehaus.izpack:izpack-standalone-compiler:4.3.5'

  implementation fileTree(dir: 'lib').include("*.jar")
  implementation (
    [group: 'org.jetbrains', name: 'annotations', version: '18.0.0'],
    [group: 'com.nwalsh', name: 'nwalsh-annotations', version: '1.0.0'],
    [group: 'org.relaxng', name: 'jing', version: '20181222' ],
    [group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'],
    [group: 'junit', name: 'junit', version: '4.13.2'],
    [group: 'net.java.dev.msv', name: 'msv-core', version: '2013.6.1'],
    [group: saxonGroup, name: saxonName, version: saxonVersion ],
    [group: 'com.ibm.icu', name: 'icu4j', version: '49.1'],
    [group: 'nu.validator.htmlparser', name: 'htmlparser', version: '1.4'],
    [group: 'org.apache.ant', name: 'ant', version: '1.9.4'],
    [group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'],
    [group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.13'],
    [group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.15'],
    [group: 'org.atteo.classindex', name: 'classindex', version: '3.3'],
    [group: 'org.ccil.cowan.tagsoup', name: 'tagsoup', version: '1.2.1'],
    [group: 'org.restlet.jee', name: 'org.restlet', version: '2.2.2'],
    [group: 'org.restlet.jee', name: 'org.restlet.ext.fileupload', version: '2.2.2'],
    [group: 'org.restlet.jee', name: 'org.restlet.ext.slf4j', version: '2.2.2'],
    [group: 'commons-fileupload', name: 'commons-fileupload', version: '1.4'],
    [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'],
    [group: 'org.xmlresolver', name: 'xmlresolver', version: xmlresolverVersion],
    [group: 'org.commonmark', name: 'commonmark', version: '0.21.0']
  )

  runtimeOnly (
    fileTree(dir: 'lib').include("*.jar"),
    [group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'],
  )

  reportruntime (
    files("lib/deltaxml.lic"),
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-asciidoctor', version: '1.2.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-deltaxml', version: '1.2.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-ditaa', version: '1.2.1'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-mathml-to-svg', version: '1.2.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-metadata-extractor', version: '1.2.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-plantuml', version: '1.2.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-print', version: '1.3.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-rdf', version: '1.2.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-sendmail', version: '1.2.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-xcc', version: '1.2.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-xmlunit', version: '1.2.0']
  )
}

// Make explicit use of annotationProcessorPath to satisfy Gradle.
// Maybe it's possible to do better than "configurations.compile", but the
// implementation uses annotations to find step implementations, so there's
// going to be a lot of them. Also, set JDK7LIB if you want the warning
// about "bootstrap class path not set in conjunction with -source 1.7"
// to go away. (I set it in ~/.gradle/gradle.properties)
compileJava {
  options.deprecation = true
  options.compilerArgs += ['-Xlint:deprecation']
  options.annotationProcessorPath = configurations.compileClasspath
}

compileTestJava {
    if (project.hasProperty("JDK7LIB")) {
        options.bootstrapClasspath = fileTree(dir: project.ext.JDK7LIB).include("*.jar")
    }
    options.annotationProcessorPath = configurations.compileClasspath
}

test {
    testLogging.showStandardStreams = false
}

sourceSets {
  main {
    java {
      exclude "com/xmlcalabash/testdrivers/**"
    }
    resources {
    }
  }
}

if (!hasProperty("sonatypeUsername")) {
  ext.sonatypeUsername=""
}

if (!hasProperty("sonatypePassword")) {
  ext.sonatypePassword=""
}

def Properties versionProps = new Properties()
def versionPropsFile = file("src/main/resources/etc/version.properties")
versionProps['version'] = releaseVersion
versionProps.store(versionPropsFile.newWriter(),null)

task copyLib(type: Copy) {
  FileCollection runtime  = configurations.compileClasspath
  FileCollection localLib = fileTree(dir: 'lib').include("*.jar")
  FileCollection lib = runtime - localLib
  String path = ""
  lib.each {
    File file -> path += " lib/" + file.name
  }
  project.ext.runtimeClasspath = path.trim()

  from lib
  into { "build/dist/lib" }
}

jar {
  archiveBaseName = "xmlcalabash-" + relVersion
  bnd ('Bundle-Vendor': 'Norman Walsh',
       'Bundle-Description': 'XML Calabash an XProc 1.0 pipeline processor.',
       'Bundle-Name': 'xmlcalabash1',
       'Bundle-SymbolicName': 'com.xmlcalabash',
       'Class-Path': project.ext.runtimeClasspath + " lib",
       'Implementation-Title': 'XML Calabash',
       'Implementation-Version': project.ext.distVersion,
       'Main-Class': 'com.xmlcalabash.drivers.Main'
  )
}

izpack {
  baseDir = file("build/dist")
  installFile = file("build/install.xml")
  outputFile = file("build/distributions/xmlcalabash-" + project.ext.distVersion + ".jar")
}

task copyNotices(type: Copy) {
  from 'resources/notices'
  into 'build/dist/docs/notices'
}
jar.dependsOn copyNotices

task downloadReferenceDocs(type: Download) {
  src docsBaseURI + project.ext.refDocZip
  dest new File(buildDir, refDocZip)
}
downloadReferenceDocs.onlyIf { !file("$buildDir/$refDocZip").exists() }

task copyReferenceDocs(dependsOn: downloadReferenceDocs, type: Copy) {
  from zipTree(downloadReferenceDocs.dest)
  into { "build" }
  doLast {
    copy {
      from "build/xmlcalabash-ref-" + docsVersion
      into "build/dist/docs/reference"
    }
  }
}
compileTestJava.dependsOn copyReferenceDocs
test.dependsOn copyReferenceDocs
javadoc.dependsOn copyReferenceDocs

task copySchemas(type: Copy) {
  from 'resources/schemas'
  into 'build/dist/schemas'
}

task copyREADME(type: Copy) {
  from 'resources/README'
  into 'build/dist'
}

task copyXpl(type: Copy) {
  FileCollection xpl = fileTree(dir: 'xpl').exclude("submit-test-report.xpl")
  from xpl
  into 'build/dist/xpl'
}

// Just depend on something that will create build/dist
task copyVERSION(dependsOn: copyXpl) {
  doLast {
    def outputFile = new File("$buildDir/dist", "VERSION")
    outputFile.withPrintWriter { writer ->
      writer.println project.ext.distVersion
    }
  }
}

task copyToDist(dependsOn: [copyLib,copyNotices,copyReferenceDocs,copySchemas,
                            copyXpl,copyREADME,copyVERSION]) {
}
jar.dependsOn copyToDist

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  archiveVersion = relVersion
  from tasks.javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: ["copyReferenceDocs"]) {
  classifier = 'sources'
  archiveVersion = relVersion
  from sourceSets.main.allSource
}

task copyJar(dependsOn: jar, type: Copy) {
  from "build/libs/xmlcalabash-" + distVersion + ".jar"
  into "build/dist"
}

task copyJavaDoc(dependsOn: javadoc, type: Copy) {
  from "build/docs"
  into "build/dist/docs"
}

task makeDist(dependsOn: [ build, copyJar, copyLib ]) {
  doLast {
    println "Created distribution in build/dist"
  }
}

task zipDist(dependsOn: makeDist, type: Zip) {
  from('build/dist')
  exclude(["calabash", "calabash.bat"])
  into 'xmlcalabash-' + relVersion
  archiveFileName = 'xmlcalabash-' + relVersion + ".zip"
}

task izPackDist(dependsOn: izPackCreateInstaller) {
  // nop
}

task dist(dependsOn: [zipDist, izPackDist]) {
  // nop
}

task testSuiteMessages {
  doLast {
    println "Running test-suite...this may take a few minutes..."
    println "  Sending report to " + testsReport + "; errors to " + testsErrors
  }
}

task testSuite(dependsOn: [makeDist, testSuiteMessages], type: JavaExec) {
  classpath = configurations.reportruntime + sourceSets.main.output

  main = 'com.xmlcalabash.drivers.RunTestReport'
  maxHeapSize = "1024m"
  args('-D', '-a',
       testsRoot + '/tests/required/test-suite.xml',
       testsRoot + '/tests/serialization/test-suite.xml',
       testsRoot + '/tests/optional/test-suite.xml',
       testsRoot + '/tests/extension/test-suite.xml',
       "http://xmlcalabash.com/tests/test-suite.xml")
  // "http://localhost:8130/tests/test-suite.xml")

  standardOutput = new FileOutputStream(new File("${projectDir}/${testsReport}"))
  errorOutput = new FileOutputStream(new File("${projectDir}/${testsErrors}"))
}

task testSuiteClassPath {
  doLast {
    configurations.reportruntime.each { println it }
    configurations.runtimeOnly.each { println it }
    sourceSets.main.output.each { println it }
  }
}

task htmlReport(dependsOn: testSuite, type: JavaExec) {
  classpath = configurations.reportruntime + sourceSets.main.output
  main = 'net.sf.saxon.Transform'
  args('-s:' + testsReport,
       '-xsl:resources/format-report.xsl',
       '-o:' + testsFormat)
}

task aDocReport(dependsOn: testSuite, type: JavaExec) {
  classpath = configurations.reportruntime + sourceSets.main.output
  main = 'net.sf.saxon.Transform'
  args('-s:' + testsReport,
       '-xsl:resources/asciidoc-report.xsl',
       '-o:' + testsADoc)
}

task aDocErrReport(dependsOn: testSuite, type: JavaExec) {
  classpath = configurations.reportruntime + sourceSets.main.output
  main = 'net.sf.saxon.Transform'
  args('-s:' + testsReport,
       '-xsl:resources/asciidoc-report.xsl',
       '-o:' + testsFailADoc,
       'show-pass=0',
       'show-partial=0')
}

task report(dependsOn: [htmlReport,aDocReport,aDocErrReport]) {
  // nop
}

// Just depend on something that will create build/dist
task makeIZPackShell(dependsOn: copyVERSION) {
  doLast {
    def shell = new File("$buildDir/dist", "calabash")
    shell.withPrintWriter { writer ->
      writer.println '#!/bin/bash'
      writer.println 'java -Xmx1024m -cp %INSTALL_PATH/xmlcalabash-' + relVersion + '.jar com.xmlcalabash.drivers.Main "$@"'
    }
    shell.setExecutable(true)

    def batch = new File("$buildDir/dist", "calabash.bat")
    batch.withPrintWriter { writer ->
      writer.println 'java -Xmx1024m -cp %INSTALL_PATH/xmlcalabash-' + relVersion + '.jar com.xmlcalabash.drivers.Main %*'
    }
  }
}

task setupIZPack(dependsOn: [makeDist, makeIZPackShell], type: JavaExec) {
  classpath = configurations.reportruntime + sourceSets.main.output

  main = 'net.sf.saxon.Transform'
  args('-s:src/main/izpack/install.xml',
       '-xsl:resources/izpack-filter.xsl',
       '-o:build/install.xml',
       'version.label='+project.ext.distVersion)
}
izPackCreateInstaller.dependsOn setupIZPack

signing {
  sign publishing.publications
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = 'XML Calabash'
        packaging = 'jar'
        description = 'An XProc 1.0 processor'
        url = 'https://github.com/ndw/xmlcalabash1'

        scm {
          url = 'scm:git@github.com:ndw/xmlcalabash1.git'
          connection = 'scm:git@github.com:ndw/xmlcalabash1.git'
          developerConnection = 'scm:git@github.com:ndw/xmlcalabash1.git'
        }

        licenses {
          license {
            name = 'Common Development and Distribution License (CDDL) version 1.0'
            url = 'https://opensource.org/licenses/CDDL-1.0'
            distribution = 'repo'
          }
          license {
            name = 'GNU General Public License version 2'
            url = 'https://www.gnu.org/licenses/gpl-2.0.txt'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'ndw'
            name = 'Norman Walsh'
          }
        }
      }

      groupId = "com.xmlcalabash"
      artifactId = "xmlcalabash"
      version = relVersion
      from components.java
      artifact javadocJar
      artifact sourcesJar
    }
  }

  repositories {
    maven {
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = sonatypeUsername
        password = sonatypePassword
      }
    }
  }
}

task helloWorld() {
  doLast {
    println("Hello, world.")
  }
}
